name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install -r ./tests/test-requirements.txt  # Adjust this to your dependencies file if needed

      - name: Run tests with pytest
        run: |
          python -m pip install pytest
          pytest  # Adjust this command if specific options or directories are needed

      - name: Extract version from release tag
        id: get_version
        run: |
          # Extract the version from the release tag (assumes tags are in the form "vX.X.X")
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_ENV

      - name: Validate version consistency
        run: |
          echo "Validating version consistency..."
          TAG_VERSION=${{ env.version }}
          SETUP_PY_VERSION=$(python -c "import re; setup=open('setup.py').read(); print(re.search(r'version=[\'\"](.*?)[\'\"],', setup).group(1))")
          CONF_PY_VERSION=$(python -c "import re; conf=open('./docs/source/conf.py').read(); print(re.search(r'release = [\'\"](.*?)[\'\"]', conf).group(1))")

          echo "Tag version: $TAG_VERSION"
          echo "setup.py version: $SETUP_PY_VERSION"
          echo "conf.py version: $CONF_PY_VERSION"

          if [[ "$TAG_VERSION" != "$SETUP_PY_VERSION" || "$TAG_VERSION" != "$CONF_PY_VERSION" ]]; then
            echo "Version mismatch detected!"
            exit 1
          fi
        shell: bash

      - name: Build release distributions
        run: |
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
